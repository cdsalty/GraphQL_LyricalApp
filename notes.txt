
npm run dev
localhost:4000
localhost:4000/graphql



Since mLab is migrating to MongoAtlas, you'll need to make the following changes.
- First, go to your cluster in MongoAtlas, click the security tab, and then add a Atlas Admin. Remeber the username and pass as we will need them below in server.js! While here, grab your connection string by going back to your cluster, clicking the "Connect" button, "Connect Your Application", and then copy the connection string.
- Next, update Mongoose to 5.4.x. Afterward, you'll need to modify your server.js file:

const MONGO_URI = 'mongodb+srv://<username>:<password>@clusterNameHere.mongodb.net/';
if (!MONGO_URI) {
  throw new Error('You must provide a MongoAtlas URI');
}

mongoose.Promise = global.Promise;
mongoose.connect(MONGO_URI, {
  authSource: 'admin',
  retryWrites: true,
  dbName: 'Lyrical-GraphQL',
  useCreateIndex: true,
  useNewUrlParser: true,
});

Current Goal:
- Create a song, then add one lyric to it
--> will need an id reference to the song that gets created. 

1. Add A song:
- mutation {
    addSong(title: "Cold Nights in Georgia") {
      id	
    }
  }
2. Retrieve the id returned
{
  "data": {
    "addSong": {
      "id": "5fd2f017fa311f296878f8c8"  <--- returned by GraphQL
    }
  }
}
3. Add a lyric to the song
- in order to do this, I must use the id returned back from graphql
mutation {
  addLyricToSong(songId: "5fd2f017fa311f296878f8c8", content: "Ever see the halo of the moon") {
    id		<----- this id that gets returned will be the id of the song, NOT the id of the lyric (future note)
  }
}
          -----> This will return the id of the song that was 'modified'
Results:
{
  "data": {
    "addLyricToSong": {
      "id": "5fd2f017fa311f296878f8c8"  // <--- this is the id of the song that was modified and not the id of the lyric created
    }
  }
}

4. Ask for a list of songs
{
  songs {
    id
    title
    lyrics {
      content 
    }
  }
}

= RETURNS
{
  "data": {
    "songs": [
      {
        "id": "5fd2f017fa311f296878f8c8",
        "title": "Cold Nights in Georgia",
        "lyrics": [
          {
            "content": "Ever see the halo of the moon"
          }
        ]
      }
    ]
  }
}

____________________________________________________________________________________________________________________________________________________________

Apollo Client Setup:
- open injdex.js from the client's side(front-end)
- majority of the work in here will depend on how you wrap the application with some helper functions from the Apollo Client Library
- React uses Apollo Provider and Apollo Store to work with GraphQL
  - Apollo Store: communicates directly with the GraphQL Server. It stores data that comes back from the Server. Located on the client side of the application. 
***---> rest in notes... 

Goal: 
Create a new component
  - show a list of all the songs in the application
    - need to write the query that will go and fetch the data(list of songs) from the server.

SongList.js (fetch a list of songs and rendering on the screen)

